#tag Module
Protected Module M_Blowfish
	#tag Method, Flags = &h1
		Protected Sub Decrypt(data As MemoryBlock, key As String)
		  dim state As M_Blowfish.Blowfish_Context = StateWithKey( key )
		  state.Decrypt( data )
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h1
		Protected Sub Encrypt(data As MemoryBlock, key As String)
		  dim state as M_Blowfish.Blowfish_Context = StateWithKey( key )
		  state.Encrypt( data )
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h1
		Protected Function InitState() As Blowfish_Context
		  return new Blowfish_Context
		  
		  // Really just need to create a new Blowfish_Context directly, but this is here
		  // to help make conversions of code easier.
		End Function
	#tag EndMethod

	#tag Method, Flags = &h1
		Protected Function StateWithKey(key As String) As Blowfish_Context
		  // Initalize S-boxes and subkeys with Pi */
		  dim state as new Blowfish_Context
		  
		  // Transform S-boxes and subkeys with key */
		  state.Expand0State( key )
		  
		  return state
		  
		End Function
	#tag EndMethod


	#tag ViewBehavior
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
	#tag EndViewBehavior
End Module
#tag EndModule
